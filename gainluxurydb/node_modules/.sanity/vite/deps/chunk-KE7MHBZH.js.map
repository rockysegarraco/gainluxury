{
  "version": 3,
  "sources": ["../../../sanity/src/desk/components/RenderActionCollectionState.tsx", "../../../sanity/src/desk/components/RenderBadgeCollectionState.tsx", "../../../sanity/src/desk/components/paneRouter/PaneRouterProvider.tsx", "../../../sanity/src/desk/components/pane/helpers/_calcPaneResize.ts", "../../../sanity/src/desk/components/pane/helpers/_getDOMPath.ts", "../../../sanity/src/desk/components/pane/helpers/_sortElements.ts", "../../../sanity/src/desk/components/pane/paneLayoutController.ts", "../../../sanity/src/desk/components/pane/PaneLayout.tsx", "../../../sanity/src/desk/panes/document/documentInspector/DocumentInspectorPanel.tsx", "../../../sanity/src/desk/structureResolvers/PaneResolutionError.ts", "../../../sanity/src/desk/structureResolvers/assignId.ts", "../../../sanity/src/desk/structureResolvers/memoBind.ts", "../../../sanity/src/desk/structureResolvers/createPaneResolver.ts", "../../../sanity/src/desk/structureResolvers/resolveIntent.ts", "../../../sanity/src/desk/structureResolvers/createResolvedPaneNodeStream.ts", "../../../sanity/src/desk/structureResolvers/useResolvedPanes.ts", "../../../sanity/src/desk/components/deskTool/intentResolver/utils.ts", "../../../sanity/src/desk/components/deskTool/intentResolver/IntentResolver.tsx", "../../../sanity/src/desk/components/deskTool/StructureError.tsx", "../../../sanity/src/desk/panes/unknown/UnknownPaneType.tsx", "../../../sanity/src/desk/panes/loading/getWaitMessages.ts", "../../../sanity/src/desk/panes/loading/LoadingPane.tsx", "../../../sanity/src/desk/panes/DeskToolPane.tsx", "../../../sanity/src/desk/panes/error/ErrorPane.tsx", "../../../sanity/src/desk/panes/document/DocumentOperationResults.tsx", "../../../sanity/src/desk/useDeskToolSetting.ts", "../../../sanity/src/desk/panes/document/inspectDialog/constants.ts", "../../../sanity/src/desk/panes/document/inspectDialog/helpers.ts", "../../../sanity/src/desk/panes/document/inspectDialog/InspectDialog.styles.tsx", "../../../sanity/src/desk/panes/document/inspectDialog/Search.tsx", "../../../sanity/src/desk/panes/document/inspectDialog/InspectDialog.tsx", "../../../sanity/src/desk/panes/document/documentPanel/DeletedDocumentBanner.tsx", "../../../sanity/src/desk/panes/document/documentPanel/ReferenceChangedBanner.tsx", "../../../sanity/src/desk/panes/document/documentPanel/PermissionCheckBanner.tsx", "../../../sanity/src/desk/panes/document/documentPanel/documentViews/useConditionalToast.ts", "../../../sanity/src/desk/panes/document/documentPanel/documentViews/FormView.tsx", "../../../sanity/src/desk/panes/document/documentPanel/header/DocumentHeaderTabs.tsx", "../../../sanity/src/desk/panes/document/documentPanel/header/DocumentHeaderTitle.tsx", "../../../sanity/src/desk/panes/document/documentPanel/header/DocumentPanelHeader.tsx", "../../../sanity/src/desk/panes/document/documentPanel/DocumentPanel.tsx", "../../../sanity/src/desk/panes/document/statusBar/dialogs/constants.ts", "../../../sanity/src/desk/panes/document/statusBar/dialogs/ConfirmDialog.tsx", "../../../sanity/src/desk/panes/document/statusBar/dialogs/ModalDialog.tsx", "../../../sanity/src/desk/panes/document/statusBar/dialogs/PopoverDialog.tsx", "../../../sanity/src/desk/panes/document/statusBar/ActionStateDialog.tsx", "../../../sanity/src/desk/panes/document/statusBar/ActionMenuButton.tsx", "../../../sanity/src/desk/panes/document/statusBar/DocumentStatusBarActions.tsx", "../../../sanity/src/desk/panes/document/statusBar/sparkline/DocumentBadges.tsx", "../../../sanity/src/desk/panes/document/statusBar/sparkline/PublishStatus.tsx", "../../../sanity/src/desk/panes/document/statusBar/sparkline/ReviewChangesButton/AnimatedStatusIcon.tsx", "../../../sanity/src/desk/panes/document/statusBar/sparkline/ReviewChangesButton/ReviewChangesButton.tsx", "../../../sanity/src/desk/panes/document/statusBar/sparkline/DocumentSparkline.tsx", "../../../sanity/src/desk/panes/document/statusBar/DocumentStatusBar.tsx", "../../../sanity/src/desk/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx", "../../../sanity/src/desk/panes/document/DocumentPane.tsx", "../../../sanity/src/desk/components/deskTool/NoDocumentTypesScreen.tsx", "../../../sanity/src/desk/components/deskTool/DeskTitle.tsx", "../../../sanity/src/desk/components/deskTool/DeskTool.tsx", "../../../sanity/src/desk/components/deskTool/DeskToolBoundary.tsx"],
  "sourcesContent": ["import React from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: DocumentActionProps\n  children: (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  onActionComplete?: () => void\n}\n\n/** @internal */\nexport const RenderActionCollectionState = (props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete} = props\n\n  return (\n    <GetHookCollectionState onReset={onActionComplete} hooks={actions} args={actionProps}>\n      {children}\n    </GetHookCollectionState>\n  )\n}\n", "import React from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  onActionComplete?: () => void\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = (props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps, ...rest} = props\n\n  return (\n    <GetHookCollectionState {...rest} hooks={badges} args={badgeProps}>\n      {children}\n    </GetHookCollectionState>\n  )\n}\n", "import {omit} from 'lodash'\nimport React, {useCallback, useMemo} from 'react'\nimport {toString as pathToString} from '@sanity/util/paths'\nimport {RouterPaneGroup, RouterPanes, RouterPaneSibling} from '../../types'\nimport {usePaneLayout} from '../pane/usePaneLayout'\nimport {ChildLink} from './ChildLink'\nimport {BackLink} from './BackLink'\nimport {ReferenceChildLink} from './ReferenceChildLink'\nimport {PaneRouterContext} from './PaneRouterContext'\nimport {ParameterizedLink} from './ParameterizedLink'\nimport {PaneRouterContextValue} from './types'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nconst emptyArray: never[] = []\n\n/**\n * @internal\n */\nexport function PaneRouterProvider(props: {\n  children: React.ReactNode\n  flatIndex: number\n  index: number\n  params: Record<string, string | undefined>\n  payload: unknown\n  siblingIndex: number\n}) {\n  const {children, flatIndex, index, params, payload, siblingIndex} = props\n  const {navigate, navigateIntent} = useRouter()\n  const routerState = useRouterState()\n  const {panes, expand} = usePaneLayout()\n  const routerPaneGroups: RouterPaneGroup[] = useMemo(\n    () => (routerState?.panes || emptyArray) as RouterPanes,\n    [routerState?.panes],\n  )\n  const lastPane = useMemo(() => panes?.[panes.length - 2], [panes])\n\n  const groupIndex = index - 1\n\n  const modifyCurrentGroup = useCallback(\n    (modifier: (siblings: RouterPaneGroup, item: RouterPaneSibling) => RouterPaneGroup) => {\n      const currentGroup = routerPaneGroups[groupIndex] || []\n      const currentItem = currentGroup[siblingIndex]\n      const nextGroup = modifier(currentGroup, currentItem)\n      const nextPanes = [\n        ...routerPaneGroups.slice(0, groupIndex),\n        nextGroup,\n        ...routerPaneGroups.slice(groupIndex + 1),\n      ]\n      const nextRouterState = {...(routerState || {}), panes: nextPanes}\n\n      setTimeout(() => navigate(nextRouterState), 0)\n\n      return nextRouterState\n    },\n    [groupIndex, navigate, routerPaneGroups, routerState, siblingIndex],\n  )\n\n  const setPayload: PaneRouterContextValue['setPayload'] = useCallback(\n    (nextPayload) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, payload: nextPayload},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex],\n  )\n\n  const setParams: PaneRouterContextValue['setParams'] = useCallback(\n    (nextParams) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, params: nextParams},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex],\n  )\n\n  const handleEditReference: PaneRouterContextValue['handleEditReference'] = useCallback(\n    ({id, parentRefPath, type, template}) => {\n      navigate({\n        panes: [\n          ...routerPaneGroups.slice(0, groupIndex + 1),\n          [\n            {\n              id,\n              params: {template: template.id, parentRefPath: pathToString(parentRefPath), type},\n              payload: template.params,\n            },\n          ],\n        ],\n      })\n    },\n    [groupIndex, navigate, routerPaneGroups],\n  )\n\n  const ctx: PaneRouterContextValue = useMemo(\n    () => ({\n      // Zero-based index (position) of pane, visually\n      index: flatIndex,\n\n      // Zero-based index of pane group (within URL structure)\n      groupIndex,\n\n      // Zero-based index of pane within sibling group\n      siblingIndex,\n\n      // Payload of the current pane\n      payload,\n\n      // Params of the current pane\n      params,\n\n      // Whether or not the pane has any siblings (within the same group)\n      hasGroupSiblings: routerPaneGroups[groupIndex]\n        ? routerPaneGroups[groupIndex].length > 1\n        : false,\n\n      // The length of the current group\n      groupLength: routerPaneGroups[groupIndex] ? routerPaneGroups[groupIndex].length : 0,\n\n      // Current router state for the \"panes\" property\n      routerPanesState: routerPaneGroups,\n\n      // Curried StateLink that passes the correct state automatically\n      ChildLink,\n\n      // Curried StateLink that pops off the last pane group\n      BackLink,\n\n      // A specialized `ChildLink` that takes in the needed props to open a\n      // referenced document to the right\n      ReferenceChildLink,\n\n      // Similar to `ReferenceChildLink` expect without the wrapping component\n      handleEditReference,\n\n      // Curried StateLink that passed the correct state, but merges params/payload\n      ParameterizedLink,\n\n      // Replaces the current pane with a new one\n      replaceCurrent: (opts = {}): void => {\n        modifyCurrentGroup(() => [\n          {id: opts.id || '', payload: opts.payload, params: opts.params || {}},\n        ])\n      },\n\n      // Removes the current pane from the group\n      closeCurrent: (): void => {\n        modifyCurrentGroup((siblings, item) =>\n          siblings.length > 1 ? siblings.filter((sibling) => sibling !== item) : siblings,\n        )\n      },\n\n      // Removes all panes to the right including current\n      closeCurrentAndAfter: (expandLast = true): void => {\n        if (expandLast && lastPane) {\n          expand(lastPane.element)\n        }\n        navigate(\n          {\n            panes: [...routerPaneGroups.slice(0, groupIndex)],\n          },\n          {replace: true},\n        )\n      },\n\n      // Duplicate the current pane, with optional overrides for payload, parameters\n      duplicateCurrent: (options): void => {\n        modifyCurrentGroup((siblings, item) => {\n          const duplicatedItem = {\n            ...item,\n            payload: options?.payload || item.payload,\n            params: options?.params || item.params,\n          }\n\n          return [\n            ...siblings.slice(0, siblingIndex),\n            duplicatedItem,\n            ...siblings.slice(siblingIndex),\n          ]\n        })\n      },\n\n      // Set the view for the current pane\n      setView: (viewId) => {\n        const restParams = omit(params, 'view')\n        return setParams(viewId ? {...restParams, view: viewId} : restParams)\n      },\n\n      // Set the parameters for the current pane\n      setParams,\n\n      // Set the payload for the current pane\n      setPayload,\n\n      // Proxied navigation to a given intent. Consider just exposing `router` instead?\n      navigateIntent,\n    }),\n    [\n      flatIndex,\n      groupIndex,\n      siblingIndex,\n      payload,\n      params,\n      routerPaneGroups,\n      handleEditReference,\n      setParams,\n      setPayload,\n      navigateIntent,\n      modifyCurrentGroup,\n      lastPane,\n      navigate,\n      expand,\n    ],\n  )\n\n  return <PaneRouterContext.Provider value={ctx}>{children}</PaneRouterContext.Provider>\n}\n", "import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {PaneConfigOpts, PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n", "/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n", "import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n", "import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {PaneConfigOpts, PaneData, PaneResizeCache, PaneResizeData} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n", "import {CardProps, useElementRect} from '@sanity/ui'\nimport React, {useMemo, useState, useEffect} from 'react'\nimport {PaneLayoutContext} from './PaneLayoutContext'\nimport {PaneLayoutContextValue} from './types'\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, PaneLayoutState} from './paneLayoutController'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const controller = useMemo(() => createPaneLayoutController(), [])\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n", "import React, {ReactElement, createElement, useCallback} from 'react'\nimport {Box} from '@sanity/ui'\nimport {usePane} from '../../../components'\nimport {useDeskTool} from '../../../useDeskTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Resizable} from './Resizable'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(props: DocumentInspectorPanelProps): ReactElement | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useDeskTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const element = createElement(inspector.component, {\n    onClose: handleClose,\n    documentId,\n    documentType,\n  })\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n", "import {RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n", "import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n", "/* eslint-disable @typescript-eslint/ban-types */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never},\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`,\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n", "import {from, isObservable, Observable, of as observableOf, Subscribable} from 'rxjs'\n\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\n\nimport {PaneNode, RouterPaneSiblingContext, UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\nimport {isRecord} from 'sanity'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number,\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount(),\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex)),\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      }),\n    ),\n  )\n\n  return resolvePane\n}\n", "import {omit} from 'lodash'\nimport {firstValueFrom, Observable} from 'rxjs'\nimport {PaneNode, RouterPanes, RouterPaneSiblingContext, UnresolvedPaneNode} from '../types'\nimport {StructureContext} from '../structureBuilder'\nimport {assignId} from './assignId'\nimport {memoBind} from './memoBind'\nimport {createPaneResolver, PaneResolverMiddleware} from './createPaneResolver'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          }),\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n", "import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {Observable, NEVER, of as observableOf, concat} from 'rxjs'\nimport {switchMap, map, scan, distinctUntilChanged, pairwise, startWith} from 'rxjs/operators'\nimport {\n  DocumentPaneNode,\n  PaneNode,\n  RouterPaneSiblingContext,\n  RouterPanes,\n  RouterPaneSibling,\n  PaneNodeResolver,\n  UnresolvedPaneNode,\n} from '../types'\nimport {StructureContext} from '../structureBuilder'\nimport {assignId} from './assignId'\nimport {createPaneResolver, PaneResolver, PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`,\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown},\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes])),\n        )\n      }),\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e,\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          })),\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      }),\n    ),\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[],\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    }),\n  )\n}\n", "import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {LOADING_PANE} from '../constants'\nimport {RouterPanes, PaneNode, RouterPaneGroup} from '../types'\nimport {useDeskTool} from '../useDeskTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\nimport {RouterState, useRouter} from 'sanity/router'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined>\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\nexport interface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const routerStateSubject = useMemo(() => new ReplaySubject<RouterState>(1), [])\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject],\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useDeskTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      }),\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n", "import {uuid} from '@sanity/uuid'\nimport {first} from 'rxjs/operators'\nimport {firstValueFrom, Observable} from 'rxjs'\nimport {PaneResolutionError} from '../../../structureResolvers'\nimport {getPublishedId, DocumentStore} from 'sanity'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId,\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined,\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>,\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n", "import {memo, useCallback, useEffect, useState} from 'react'\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useDeskTool} from '../../../useDeskTool'\nimport {ensureDocumentIdAndType} from './utils'\nimport {useRouter, useRouterState} from 'sanity/router'\nimport {isRecord, useDocumentStore} from 'sanity'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, []),\n  )\n  const {rootPaneNode, structureContext} = useDeskTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      // eslint-disable-next-line no-inner-declarations\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined,\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n", "import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {Box, Button, Card, Code, Container, Heading, Label, Stack, Text} from '@sanity/ui'\nimport React, {useCallback} from 'react'\nimport styled from 'styled-components'\nimport {SyncIcon} from '@sanity/icons'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">Encountered an error while reading structure</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Label>Structure path</Label>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Label>Error</Label>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  View documentation\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button text=\"Reload\" icon={SyncIcon} tone=\"primary\" onClick={handleReload} />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n", "import {Box, Text} from '@sanity/ui'\nimport React from 'react'\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\nimport {isRecord} from 'sanity'\n\ninterface UnknownPaneProps {\n  isSelected: boolean\n  pane: unknown\n  paneKey: string\n}\n\n/**\n * @internal\n */\nexport function UnknownPane(props: UnknownPaneProps) {\n  const {isSelected, pane, paneKey} = props\n  const type = (isRecord(pane) && pane.type) || null\n\n  return (\n    <Pane id={paneKey} selected={isSelected}>\n      <PaneHeader title=\"Unknown pane type\" />\n      <PaneContent>\n        <Box padding={4}>\n          {typeof type === 'string' ? (\n            <Text as=\"p\" muted>\n              Structure item of type <code>{type}</code> is not a known entity.\n            </Text>\n          ) : (\n            <Text as=\"p\" muted>\n              Structure item is missing required <code>type</code> property.\n            </Text>\n          )}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n", "import {Observable, of, merge} from 'rxjs'\nimport {mapTo, delay} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<string> {\n  const thresholds = [\n    {ms: 300, message: 'Loading…'},\n    {ms: 5000, message: 'Still loading…'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(...thresholds.map(({ms, message}) => src.pipe(mapTo(message), delay(ms))))\n}\n", "import {Box, CardTone, Flex, Spinner, Text, _raf2} from '@sanity/ui'\nimport React, {memo, useMemo, useState, useEffect} from 'react'\nimport {Observable} from 'rxjs'\nimport styled from 'styled-components'\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {getWaitMessages} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<string>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE = 'Loading…'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return DEFAULT_MESSAGE\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe === 'function') return undefined\n\n    const sub = resolvedMessage.subscribe(setCurrentMessage)\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <Spinner muted />\n\n      {(title || currentMessage) && (\n        <Box marginTop={3}>\n          <Text align=\"center\" muted size={1}>\n            {title || currentMessage}\n          </Text>\n        </Box>\n      )}\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'LoadingPane'\n", "import React, {memo, lazy, Suspense} from 'react'\nimport {isEqual} from 'lodash'\nimport {PaneNode} from '../types'\nimport {PaneRouterProvider} from '../components/paneRouter'\nimport {UnknownPane} from './unknown'\nimport {LoadingPane} from './loading'\n\ninterface DeskToolPaneProps {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  pane: PaneNode\n  paneKey: string\n  params: Record<string, string | undefined>\n  payload: unknown\n  path: string\n  selected: boolean\n  siblingIndex: number\n}\n\n// TODO: audit this creates separate chunks\nconst paneMap = {\n  component: lazy(() => import('./userComponent')),\n  document: lazy(() => import('./document')),\n  documentList: lazy(() => import('./documentList')),\n  list: lazy(() => import('./list')),\n}\n\n/**\n * NOTE: The same pane might appear multiple times (split pane), so use index as tiebreaker\n *\n * @internal\n */\nexport const DeskToolPane = memo(\n  function DeskToolPane(props: DeskToolPaneProps) {\n    const {\n      active,\n      childItemId,\n      groupIndex,\n      index,\n      itemId,\n      pane,\n      paneKey,\n      params,\n      payload,\n      path,\n      selected,\n      siblingIndex,\n    } = props\n\n    const PaneComponent = paneMap[pane.type] || UnknownPane\n\n    return (\n      <PaneRouterProvider\n        flatIndex={index}\n        index={groupIndex}\n        params={params}\n        payload={payload}\n        siblingIndex={siblingIndex}\n      >\n        <Suspense fallback={<LoadingPane paneKey={paneKey} path={path} selected={selected} />}>\n          <PaneComponent\n            childItemId={childItemId || ''}\n            index={index}\n            itemId={itemId}\n            isActive={active}\n            isSelected={selected}\n            paneKey={paneKey}\n            // @ts-expect-error TS doesn't know how to handle this intersection\n            pane={pane}\n          />\n        </Suspense>\n      </PaneRouterProvider>\n    )\n  },\n  (\n    {params: prevParams = {}, payload: prevPayload = null, ...prev},\n    {params: nextParams = {}, payload: nextPayload = null, ...next},\n  ) => {\n    // deeply compare these objects (it's okay, they're small)\n    if (!isEqual(prevParams, nextParams)) return false\n    if (!isEqual(prevPayload, nextPayload)) return false\n\n    const keys = new Set([...Object.keys(prev), ...Object.keys(next)]) as Set<\n      keyof typeof next | keyof typeof prev\n    >\n\n    // then shallow equal the rest\n    for (const key of keys) {\n      if (prev[key] !== next[key]) return false\n    }\n\n    return true\n  },\n)\n", "import React from 'react'\nimport {Box, CardTone} from '@sanity/ui'\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n", "import {useToast} from '@sanity/ui'\nimport React, {memo, useEffect, useRef} from 'react'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentOperationEvent} from 'sanity'\nimport {usePaneRouter} from '../../components'\n\nfunction getOpErrorTitle(op: string): string {\n  if (op === 'delete') {\n    return `An error occurred while attempting to delete this document.\n      This usually means that there are other documents that refers to it.`\n  }\n  if (op === 'unpublish') {\n    return `An error occurred while attempting to unpublish this document.\n      This usually means that there are other documents that refers to it.`\n  }\n  return `An error occurred during ${op}`\n}\n\nfunction getOpSuccessTitle(op: string): string {\n  if (op === 'publish') {\n    return `The document was published`\n  }\n  if (op === 'unpublish') {\n    return `The document was unpublished. A draft has been created from the latest published version.`\n  }\n  if (op === 'discardChanges') {\n    return `All changes since last publish has now been discarded. The discarded draft can still be recovered from history`\n  }\n  if (op === 'delete') {\n    return `The document was successfully deleted`\n  }\n  return `Successfully performed ${op} on document`\n}\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType} = useDocumentPane()\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: getOpErrorTitle(event.op),\n        description: (\n          <details>\n            <summary>Details</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: getOpSuccessTitle(event.op),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast])\n\n  return null\n})\n", "import {useCallback, useEffect, useMemo, useState} from 'react'\nimport {useSettingsStore} from 'sanity'\n\n/**\n * @internal\n */\nexport function useDeskToolSetting<ValueType>(\n  namespace: string | null,\n  key: string,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const settingsStore = useSettingsStore()\n  const [value, setValue] = useState<ValueType | undefined>(defaultValue)\n\n  const deskToolSettings = useMemo(() => settingsStore.forNamespace('desk-tool'), [settingsStore])\n\n  const settings = useMemo(() => {\n    if (namespace) {\n      return deskToolSettings.forNamespace(namespace).forKey(key)\n    }\n\n    return deskToolSettings.forKey(key)\n  }, [deskToolSettings, namespace, key])\n\n  useEffect(() => {\n    const sub = settings.listen(defaultValue).subscribe({\n      next: setValue as any,\n    })\n\n    return () => sub?.unsubscribe()\n  }, [defaultValue, key, namespace, settings])\n\n  const set = useCallback(\n    (newValue: ValueType) => {\n      setValue(newValue)\n      settings.set(newValue as any)\n    },\n    [settings],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n", "export const VIEW_MODE_PARSED = {id: 'parsed', title: 'Parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'Raw JSON'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n", "import {SanityDocumentLike} from '@sanity/types'\nimport HLRU from 'hashlru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = HLRU(1000)\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n", "import {rem, Theme} from '@sanity/ui'\nimport styled, {css} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[2].fontSize}px;\n      line-height: ${fonts.code.sizes[2].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[2].fontSize}px;\n      line-height: ${fonts.code.sizes[2].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[2].fontSize}px;\n      line-height: ${fonts.code.sizes[2].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n", "import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport React, {useCallback} from 'react'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder=\"Search\"\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n", "import {SanityDocument} from '@sanity/types'\nimport {Card, Code, Dialog, Flex, Tab, TabList, TabPanel} from '@sanity/ui'\nimport React, {useCallback} from 'react'\nimport JSONInspector from '@rexxars/react-json-inspector'\nimport {DocTitle} from '../../../components'\nimport {useDeskToolSetting} from '../../../useDeskToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useDeskToolSetting(\n    'desk-tool',\n    `inspect-view-preferred-view-mode-${paneKey}`,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  return (\n    <Dialog\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <>\n            Inspecting{' '}\n            <em>\n              <DocTitle document={value} />\n            </em>\n          </>\n        ) : (\n          <em>No value</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      width={3}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card padding={3} shadow={1} style={{position: 'sticky', bottom: 0, zIndex: 3}}>\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              fontSize={1}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={VIEW_MODE_PARSED.title}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              fontSize={1}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={VIEW_MODE_RAW.title}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JSONInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n", "import React, {useCallback} from 'react'\nimport {Button, Card, Container, Flex, Text} from '@sanity/ui'\nimport {ReadOnlyIcon} from '@sanity/icons'\nimport styled from 'styled-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentOperation} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nconst Root = styled(Card)`\n  position: relative;\n  z-index: 50;\n`\n\ninterface DeletedDocumentBannerProps {\n  revisionId?: string | null\n}\n\nexport function DeletedDocumentBanner({revisionId}: DeletedDocumentBannerProps) {\n  const {documentId, documentType} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n  const handleRestore = useCallback(() => {\n    if (revisionId) {\n      restore.execute(revisionId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, revisionId])\n\n  return (\n    <Root data-testid=\"deleted-document-banner\" shadow={1} tone=\"transparent\">\n      <Container paddingX={4} paddingY={revisionId ? 2 : 3} sizing=\"border\" width={1}>\n        <Flex align=\"center\">\n          <Text size={1}>\n            <ReadOnlyIcon />\n          </Text>\n\n          <Flex align=\"center\" gap={2} flex={1} marginLeft={3}>\n            <Text size={1}>This document has been deleted.</Text>\n            {revisionId && (\n              <Button\n                fontSize={1}\n                padding={2}\n                mode=\"bleed\"\n                tone=\"primary\"\n                onClick={handleRestore}\n                text=\"Restore most recent version\"\n              />\n            )}\n          </Flex>\n        </Flex>\n      </Container>\n    </Root>\n  )\n}\n", "import {Box, Button, Card, Container, Flex, Text} from '@sanity/ui'\nimport {WarningOutlineIcon, SyncIcon, CloseIcon} from '@sanity/icons'\nimport React, {memo, useCallback, useMemo} from 'react'\nimport styled from 'styled-components'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {KeyedSegment, Reference} from '@sanity/types'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {concat, Observable, of} from 'rxjs'\nimport {useMemoObservable} from 'react-rx'\nimport {RouterPaneGroup} from '../../../types'\nimport {usePaneRouter} from '../../../components'\nimport {DocumentAvailability, useDocumentPreviewStore, getPublishedId} from 'sanity'\n\nconst Root = styled(Card)`\n  position: relative;\n  z-index: 50;\n`\n\nconst TextOneLine = styled(Text)`\n  & > * {\n    overflow: hidden;\n    overflow: clip;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n`\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {draft: DocumentAvailability; published: DocumentAvailability}\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfo = useMemoObservable(\n    (): Observable<ParentReferenceInfo> => {\n      const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n      // short-circuit: this document pane is not a child reference pane\n      if (!parentId || !parentRefPathSegment || !parentRefPath) {\n        return of({loading: false})\n      }\n\n      const publishedId = getPublishedId(parentId)\n      const path = pathFromString(parentRefPathSegment)\n\n      // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n      const keyedSegmentIndex = path.findIndex(\n        (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n      )\n\n      return concat(\n        // emit a loading state instantly\n        of({loading: true}),\n        // then emit the values from watching the published ID's path\n        documentPreviewStore\n          .unstable_observePathsDocumentPair(\n            publishedId,\n            (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n          )\n          .pipe(\n            // this debounce time is needed to prevent flashing banners due to\n            // the router state updating faster than the content-lake state. we\n            // debounce to wait for more emissions because the value pulled\n            // initially could be stale.\n            debounceTime(750),\n            map(\n              ({draft, published}): ParentReferenceInfo => ({\n                loading: false,\n                result: {\n                  availability: {\n                    draft: draft.availability,\n                    published: published.availability,\n                  },\n                  refValue: pathGet<Reference>(draft.snapshot || published.snapshot, parentRefPath)\n                    ?._ref,\n                },\n              }),\n            ),\n          ),\n      )\n    },\n    [documentPreviewStore, parentId, parentRefPath],\n    {loading: true},\n  )\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Root shadow={1} tone=\"caution\" data-testid=\"reference-changed-banner\">\n      <Container paddingX={4} paddingY={2} sizing=\"border\" width={1}>\n        <Flex align=\"center\">\n          <Text size={1}>\n            <WarningOutlineIcon />\n          </Text>\n\n          {referenceInfo.result?.refValue ? (\n            <>\n              <Box flex={1} marginLeft={3}>\n                <TextOneLine title=\"This reference has changed since you opened it.\" size={1}>\n                  This reference has changed since you opened it.\n                </TextOneLine>\n              </Box>\n              <Box marginLeft={3}>\n                <Button\n                  onClick={handleReloadReference}\n                  icon={SyncIcon}\n                  fontSize={1}\n                  mode=\"ghost\"\n                  padding={2}\n                  space={2}\n                  text=\"Reload reference\"\n                />\n              </Box>\n            </>\n          ) : (\n            <>\n              <Box flex={1} marginLeft={3}>\n                <TextOneLine title=\"This reference has been removed since you opened it.\" size={1}>\n                  This reference has been removed since you opened it.\n                </TextOneLine>\n              </Box>\n              <Box marginLeft={3}>\n                <Button\n                  as={BackLink}\n                  icon={CloseIcon}\n                  fontSize={1}\n                  mode=\"ghost\"\n                  padding={2}\n                  space={2}\n                  text=\"Close reference\"\n                />\n              </Box>\n            </>\n          )}\n        </Flex>\n      </Container>\n    </Root>\n  )\n})\n\nReferenceChangedBanner.displayName = 'ReferenceChangedBanner'\n", "import React from 'react'\nimport {Box, Card, Container, Flex, Text} from '@sanity/ui'\nimport {ReadOnlyIcon} from '@sanity/icons'\nimport styled from 'styled-components'\nimport {useCurrentUser} from 'sanity'\n\nconst Root = styled(Card)`\n  position: relative;\n  z-index: 50;\n`\n\ninterface PermissionCheckBannerProps {\n  granted: boolean\n  requiredPermission: string\n}\n\nexport function PermissionCheckBanner({granted, requiredPermission}: PermissionCheckBannerProps) {\n  const currentUser = useCurrentUser()\n  const plural = currentUser?.roles?.length !== 1\n\n  const roles = join(\n    currentUser?.roles?.map((r) => <code key={r.name}>{r.title}</code>) || [],\n    ', ',\n  )\n\n  if (granted) return null\n\n  return (\n    <Root data-testid=\"permission-check-banner\" shadow={1} tone=\"transparent\">\n      <Container paddingX={4} paddingY={3} sizing=\"border\" width={1}>\n        <Flex align=\"flex-start\">\n          <Text size={1}>\n            <ReadOnlyIcon />\n          </Text>\n\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              Your role{plural && 's'} {roles} {plural ? 'do' : 'does'} not have permissions to{' '}\n              {requiredPermission} this document.\n            </Text>\n          </Box>\n        </Flex>\n      </Container>\n    </Root>\n  )\n}\n\nfunction join<T, S>(array: Array<T>, sep: S): Array<T | S> | null {\n  return array.reduce((result: Array<T | S> | null, item: T | S) => {\n    if (result === null) {\n      return [item]\n    }\n\n    return result.concat([sep, item])\n  }, null)\n}\n", "import {useEffect, useRef} from 'react'\nimport {ToastParams, useToast} from '@sanity/ui'\n\nfunction usePrevious<T>(value: T) {\n  const ref = useRef<T>()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  const wasEnabled = usePrevious(params.enabled)\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (!wasEnabled && params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    if (wasEnabled && !params.enabled) {\n      toast.push({\n        ...params,\n        // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n        duration: 0.01,\n      })\n    }\n  }, [params, toast, wasEnabled])\n}\n", "/* eslint-disable no-nested-ternary */\n\nimport {Box, Container, Flex, Spinner, Text, focusFirstDescendant} from '@sanity/ui'\nimport React, {forwardRef, useEffect, useMemo, useRef, type Ref, useCallback, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Delay} from '../../../../components/Delay'\nimport {useConditionalToast} from './useConditionalToast'\nimport {\n  DocumentMutationEvent,\n  DocumentRebaseEvent,\n  FormBuilder,\n  PatchMsg,\n  PresenceOverlay,\n  createPatchChannel,\n  fromMutationPatches,\n  useDocumentPresence,\n  useDocumentStore,\n} from 'sanity'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: React.FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n  } = useDocumentPane()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const patchChannel = useMemo(() => createPatchChannel(), [])\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n\n  useConditionalToast({\n    id: `sync-lock-${documentId}`,\n    status: 'warning',\n    enabled: isLocked,\n    title: `Syncing document…`,\n    description: `Please hold tight while the document is synced. This usually happens right after the document has been published, and it shouldn't take more than a few seconds`,\n  })\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel])\n\n  const hasRev = Boolean(value?._rev)\n  useEffect(() => {\n    if (hasRev) {\n      // this is a workaround for an issue that caused the document pushed to withDocument to get\n      // stuck at the first initial value.\n      // This effect is triggered only when the document goes from not having a revision, to getting one\n      // so it will kick in as soon as the document is received from the backend\n      patchChannel.publish({\n        type: 'mutation',\n        patches: [],\n        snapshot: value,\n      })\n    }\n    // React to changes in hasRev only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (ready && !formState?.focusPath.length && formRef) {\n      focusFirstDescendant(formRef)\n    }\n    // We only want to run it on first mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: React.ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {ready ? (\n            formState === null ? (\n              <Box padding={2}>\n                <Text>This form is hidden</Text>\n              </Box>\n            ) : (\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focusPath={formState.focusPath}\n                changed={formState.changed}\n                focused={formState.focused}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                presence={presence}\n                readOnly={formState.readOnly}\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={formState.value}\n              />\n            )\n          ) : (\n            <Delay ms={300}>\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    Loading document\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n", "import React, {useCallback} from 'react'\nimport {Tab, TabList} from '@sanity/ui'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {usePaneRouter} from '../../../../components'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={<>{view.title}</>}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : view.id ?? null}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: React.ComponentType | React.ReactNode\n  id: string\n  isActive: boolean\n  label: React.ReactNode\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {isActive, tabPanelId, viewId} = props\n  const {ready} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...props} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready}\n      fontSize={1}\n      selected={isActive}\n      onClick={handleClick}\n    />\n  )\n}\n", "import React, {ReactElement} from 'react'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {unstable_useValuePreview as useValuePreview} from 'sanity'\n\nexport function DocumentHeaderTitle(): ReactElement {\n  const {connectionState, schemaType, title, value: documentValue} = useDocumentPane()\n  const subscribed = Boolean(documentValue) && connectionState === 'connected'\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n\n  if (connectionState !== 'connected') {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return <>New {schemaType?.title || schemaType?.name}</>\n  }\n\n  if (error) {\n    return <>Error: {error.message}</>\n  }\n\n  return <>{value?.title || <span style={{color: 'var(--card-muted-fg-color)'}}>Untitled</span>}</>\n}\n", "import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Button, Flex, Text, Tooltip} from '@sanity/ui'\nimport React, {createElement, memo, forwardRef, useMemo} from 'react'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {TimelineMenu} from '../../timeline'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {useDeskTool} from '../../../../useDeskTool'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\nimport {useFieldActions, useTimelineSelector} from 'sanity'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: React.ForwardedRef<HTMLDivElement>,\n  ) {\n    const {\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItems,\n      menuItemGroups,\n      schemaType,\n      timelineStore,\n      ready,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useDeskTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    // Subscribe to external timeline state changes\n    const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button) do the same thing and shouldn't be shown at the same time)\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !features.backButton\n\n    return (\n      <PaneHeader\n        ref={ref}\n        loading={!ready}\n        title={<DocumentHeaderTitle />}\n        tabs={showTabs && <DocumentHeaderTabs />}\n        tabIndex={tabIndex}\n        backButton={\n          features.backButton &&\n          index > 0 && (\n            <Button as={BackLink} data-as=\"a\" icon={ArrowLeftIcon} mode=\"bleed\" padding={2} />\n          )\n        }\n        subActions={<TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />}\n        actions={\n          <Flex align=\"center\" gap={1}>\n            {unstable_languageFilter.length > 0 && (\n              <>\n                {unstable_languageFilter.map((languageFilterComponent, idx) => {\n                  return createElement(languageFilterComponent, {\n                    // eslint-disable-next-line react/no-array-index-key\n                    key: `language-filter-${idx}`,\n                    schemaType,\n                  })\n                })}\n              </>\n            )}\n\n            {menuButtonNodes.map((item) => (\n              <PaneHeaderActionButton key={item.key} node={item} />\n            ))}\n\n            <PaneContextMenuButton nodes={contextMenuNodes} key=\"context-menu\" />\n\n            {showSplitPaneButton && (\n              <Tooltip\n                content={\n                  <Text size={1} style={{whiteSpace: 'nowrap'}}>\n                    Split pane right\n                  </Text>\n                }\n                padding={2}\n                placement=\"bottom\"\n                portal\n              >\n                <Button\n                  aria-label=\"Split pane right\"\n                  icon={SplitVerticalIcon}\n                  key=\"split-pane-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneSplit}\n                />\n              </Tooltip>\n            )}\n\n            {showSplitPaneCloseButton && (\n              <Button\n                icon={CloseIcon}\n                key=\"close-view-button\"\n                mode=\"bleed\"\n                onClick={onPaneClose}\n                title=\"Close split pane\"\n              />\n            )}\n\n            {showPaneGroupCloseButton && (\n              <Button\n                icon={CloseIcon}\n                key=\"close-view-button\"\n                mode=\"bleed\"\n                title=\"Close pane group\"\n                as={BackLink}\n              />\n            )}\n          </Flex>\n        }\n      />\n    )\n  }),\n)\n", "import {\n  BoundaryElementProvider,\n  Flex,\n  PortalProvider,\n  usePortal,\n  useElementRect,\n  Box,\n} from '@sanity/ui'\nimport React, {createElement, useEffect, useMemo, useRef, useState} from 'react'\nimport styled, {css} from 'styled-components'\nimport {PaneContent, usePane, usePaneLayout} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDeskTool} from '../../../useDeskTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {DeletedDocumentBanner} from './DeletedDocumentBanner'\nimport {ReferenceChangedBanner} from './ReferenceChangedBanner'\nimport {PermissionCheckBanner} from './PermissionCheckBanner'\nimport {FormView} from './documentViews'\nimport {DocumentPanelHeader} from './header'\nimport {ScrollContainer, useTimelineSelector, VirtualizerScrollInstanceProvider} from 'sanity'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  rootElement: HTMLDivElement | null\n  isInspectOpen: boolean\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} = props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n    isDeleting,\n    isDeleted,\n    timelineStore,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useDeskTool()\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n  const headerRect = useElementRect(headerElement)\n  const portalRef = useRef<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? portalRef.current || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerRect?.height || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerRect])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(\n    () =>\n      activeView.type === 'component' &&\n      activeView.component &&\n      createElement(activeView.component, {\n        document: {\n          draft: editState?.draft || null,\n          displayed: displayed || value,\n          historical: displayed,\n          published: editState?.published || null,\n        },\n        documentId,\n        options: activeView.options,\n        schemaType,\n      }),\n    [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value],\n  )\n\n  const lastNonDeletedRevId = useTimelineSelector(\n    timelineStore,\n    (state) => state.lastNonDeletedRevId,\n  )\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n\n  return (\n    <>\n      <DocumentPanelHeader ref={setHeaderElement} />\n\n      <PaneContent>\n        <Flex height=\"fill\">\n          {(features.resizablePanes || !showInspector) && (\n            <DocumentBox flex={2} overflow=\"hidden\">\n              <PortalProvider\n                element={portalElement}\n                __unstable_elements={{documentScrollElement: documentScrollElement}}\n              >\n                <BoundaryElementProvider element={documentScrollElement}>\n                  <VirtualizerScrollInstanceProvider\n                    scrollElement={documentScrollElement}\n                    containerElement={formContainerElement}\n                  >\n                    {activeView.type === 'form' && !isPermissionsLoading && ready && (\n                      <>\n                        <PermissionCheckBanner\n                          granted={Boolean(permissions?.granted)}\n                          requiredPermission={requiredPermission}\n                        />\n                        {!isDeleting && isDeleted && (\n                          <DeletedDocumentBanner revisionId={lastNonDeletedRevId} />\n                        )}\n                        <ReferenceChangedBanner />\n                      </>\n                    )}\n\n                    <Scroller\n                      $disabled={layoutCollapsed || false}\n                      data-testid=\"document-panel-scroller\"\n                      ref={setDocumentScrollElement}\n                    >\n                      <FormView\n                        hidden={formViewHidden}\n                        key={documentId + (ready ? '_ready' : '_pending')}\n                        margins={margins}\n                        ref={formContainerElement}\n                      />\n                      {activeViewNode}\n                    </Scroller>\n\n                    {inspectDialog}\n\n                    <div data-testid=\"document-panel-portal\" ref={portalRef} />\n                  </VirtualizerScrollInstanceProvider>\n                </BoundaryElementProvider>\n              </PortalProvider>\n            </DocumentBox>\n          )}\n\n          {showInspector && (\n            <BoundaryElementProvider element={rootElement}>\n              <DocumentInspectorPanel\n                documentId={documentId}\n                documentType={schemaType.name}\n                flex={1}\n              />\n            </BoundaryElementProvider>\n          )}\n        </Flex>\n      </PaneContent>\n    </>\n  )\n}\n", "import {DialogProps, Placement} from '@sanity/ui'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n", "import {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  Popover,\n  Text,\n  useClickOutside,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport React, {useCallback, useState} from 'react'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\nimport {DocumentActionConfirmDialogProps} from 'sanity'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {isTopLayer} = useLayer()\n  const [element, setElement] = useState<HTMLElement | null>(null)\n\n  const handleClickOutside = useCallback(() => {\n    if (isTopLayer) onCancel()\n  }, [isTopLayer, onCancel])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useClickOutside(handleClickOutside, [element])\n  useGlobalKeyDown(handleGlobalKeyDown)\n\n  return (\n    <Flex direction=\"column\" ref={setElement} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || 'Cancel'}\n          />\n          <Button\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || 'Confirm'}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n", "import {Box, Dialog} from '@sanity/ui'\nimport React, {useId} from 'react'\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\nimport {DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n", "import {Popover, useClickOutside, useGlobalKeyDown, useLayer} from '@sanity/ui'\nimport React, {useCallback, useState} from 'react'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\nimport {DocumentActionPopoverDialogProps} from 'sanity'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const [element, setElement] = useState<HTMLElement | null>(null)\n\n  const handleClickOutside = useCallback(() => {\n    if (isTopLayer) onClose()\n  }, [isTopLayer, onClose])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useClickOutside(handleClickOutside, [element])\n  useGlobalKeyDown(handleGlobalKeyDown)\n\n  return <div ref={setElement}>{content}</div>\n}\n", "import {Box, Dialog, usePortal, PortalProvider} from '@sanity/ui'\nimport React, {useId} from 'react'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\nimport {DocumentActionDialogProps} from 'sanity'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: React.ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={2}\n    >\n      <Box padding={4}>\n        {unknownModal.content || (\n          <>\n            Unexpected modal type (<code>{unknownModal.type}</code>)\n          </>\n        )}\n      </Box>\n    </Dialog>\n  )\n}\n", "import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Box,\n  Button,\n  Flex,\n  Hotkeys,\n  Menu,\n  MenuButton,\n  MenuItem,\n  PopoverProps,\n  Text,\n  Tooltip,\n} from '@sanity/ui'\nimport React, {\n  createElement,\n  isValidElement,\n  useCallback,\n  useRef,\n  useState,\n  useMemo,\n  useId,\n} from 'react'\nimport {isValidElementType} from 'react-is'\nimport {ActionStateDialog} from './ActionStateDialog'\nimport {DocumentActionDescription, LegacyLayerProvider} from 'sanity'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n  const buttonRef = useRef<HTMLButtonElement | null>(null)\n  const [actionIndex, setActionIndex] = useState(-1)\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const currentAction = actionStates[actionIndex]\n\n  return (\n    <>\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <Button\n            data-testid=\"action-menu-button\"\n            aria-label=\"Open document actions\"\n            disabled={disabled}\n            icon={ChevronDownIcon}\n            mode=\"ghost\"\n            ref={buttonRef}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n    </>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nfunction ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const tooltipContent = actionState.title && (\n    <Box padding={2}>\n      <Text size={1}>{actionState.title}</Text>\n    </Box>\n  )\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      onClick={handleClick}\n      padding={0}\n      tone={actionState.tone}\n    >\n      <Tooltip\n        content={tooltipContent}\n        disabled={!tooltipContent}\n        fallbackPlacements={['left', 'bottom']}\n        placement=\"top\"\n        portal\n      >\n        <Flex align=\"center\" paddingX={3}>\n          <Flex flex={1} paddingY={3}>\n            {actionState.icon && (\n              <Box marginRight={3}>\n                <Text>\n                  {isValidElement(actionState.icon) && actionState.icon}\n                  {isValidElementType(actionState.icon) && createElement(actionState.icon)}\n                </Text>\n              </Box>\n            )}\n\n            <Text>{actionState.label}</Text>\n          </Flex>\n\n          {actionState.shortcut && (\n            <Box marginLeft={3}>\n              <Hotkeys\n                keys={String(actionState.shortcut)\n                  .split('+')\n                  .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))}\n              />\n            </Box>\n          )}\n        </Flex>\n      </Tooltip>\n    </MenuItem>\n  )\n}\n", "import {Box, Flex, Tooltip, Stack, Button, Hotkeys, LayerProvider, Text} from '@sanity/ui'\nimport React, {memo, useMemo, useState} from 'react'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\nimport {DocumentActionDescription, useTimelineSelector} from 'sanity'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nfunction DocumentStatusBarActionsInner(props: DocumentStatusBarActionsInnerProps) {\n  const {disabled, showMenu, states} = props\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex padding={2} style={{maxWidth: 300}} align=\"center\">\n        <Text size={1}>{firstActionState.title}</Text>\n        {firstActionState.shortcut && (\n          <Box marginLeft={firstActionState.title ? 2 : 0}>\n            <Hotkeys\n              keys={String(firstActionState.shortcut)\n                .split('+')\n                .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n            />\n          </Box>\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  return (\n    <Flex>\n      {firstActionState && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} portal placement=\"top\">\n            <Stack flex={1}>\n              <Button\n                data-testid={`action-${firstActionState.label}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n\n      {showMenu && menuActionStates.length > 0 && (\n        <Box marginLeft={1}>\n          <ActionMenuButton actionStates={menuActionStates} disabled={disabled} />\n        </Box>\n      )}\n\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n}\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  if (!actions || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      // @ts-expect-error TODO: fix the document actions\n      actionProps={editState}\n    >\n      {({states}) => (\n        <DocumentStatusBarActionsInner\n          disabled={connectionState !== 'connected'}\n          // isMenuOpen={isMenuOpen}\n          // onMenuOpen={handleMenuOpen}\n          // onMenuClose={handleMenuClose}\n          showMenu={actions.length > 1}\n          states={states}\n          // Use document ID as key to make sure that the actions state is reset when the document changes\n          key={documentId}\n        />\n      )}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {connectionState, editState, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n  const revision = revTime?.id || ''\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n  const historyActions = useMemo(() => [HistoryRestoreAction], [])\n\n  return (\n    <RenderActionCollectionState actions={historyActions} actionProps={actionProps as any}>\n      {({states}) => (\n        <DocumentStatusBarActionsInner\n          disabled={connectionState !== 'connected' || Boolean(disabled)}\n          showMenu={false}\n          states={states}\n        />\n      )}\n    </RenderActionCollectionState>\n  )\n})\n", "import {Badge, BadgeTone, Box, Inline, Text, Tooltip} from '@sanity/ui'\nimport React from 'react'\nimport {RenderBadgeCollectionState} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentBadgeDescription} from 'sanity'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nfunction DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={\n            badge.title && (\n              <Box padding={2}>\n                <Text size={1}>{badge.title}</Text>\n              </Box>\n            )\n          }\n          disabled={!badge.title}\n          key={String(index)}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n}\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState as any}>\n      {({states}) => <DocumentBadgesInner states={states} />}\n    </RenderBadgeCollectionState>\n  )\n}\n", "import {Box, Button, Flex, Stack, Text, Tooltip} from '@sanity/ui'\nimport {PlayIcon, PublishIcon} from '@sanity/icons'\nimport React from 'react'\nimport styled from 'styled-components'\nimport {useTimeAgo} from 'sanity'\n\ninterface PublishStatusProps {\n  collapsed?: boolean\n  disabled: boolean\n  lastPublished?: string\n  lastUpdated?: string\n  liveEdit: boolean\n}\n\nconst Root = styled(Flex)`\n  cursor: default;\n`\n\nexport function PublishStatus(props: PublishStatusProps) {\n  const {collapsed, disabled, lastPublished, lastUpdated, liveEdit} = props\n\n  // Label with abbreviations and suffix\n  const lastPublishedTimeAgo = useTimeAgo(lastPublished || '', {minimal: true, agoSuffix: true})\n  // Label with abbreviation and no suffix\n  const lastPublishedTime = useTimeAgo(lastPublished || '', {minimal: true})\n\n  // Label with abbreviations and suffix\n  const lastUpdatedTimeAgo = useTimeAgo(lastUpdated || '', {minimal: true, agoSuffix: true})\n  // Label with abbreviation and no suffix\n  const lastUpdatedTime = useTimeAgo(lastUpdated || '', {minimal: true})\n\n  // Accessible labels without abbreviations or suffixes\n  const a11yUpdatedAgo = useTimeAgo(lastUpdated || '', {minimal: false, agoSuffix: true})\n  const a11yPublishedAgo = useTimeAgo(lastPublished || '', {minimal: false, agoSuffix: true})\n  const a11yLabel = liveEdit\n    ? `Last updated ${a11yUpdatedAgo}`\n    : `Last published ${a11yPublishedAgo}`\n\n  return (\n    <Root align=\"center\" data-ui=\"SessionLayout\" sizing=\"border\">\n      <Tooltip\n        placement=\"top\"\n        portal\n        content={\n          <Stack padding={3} space={3}>\n            <Text size={1}>\n              {liveEdit ? (\n                <>\n                  Last updated{' '}\n                  <abbr aria-label={lastUpdated ? a11yUpdatedAgo : a11yPublishedAgo}>\n                    {lastUpdated ? lastUpdatedTimeAgo : lastPublishedTimeAgo}\n                  </abbr>\n                </>\n              ) : (\n                <>\n                  Last published <abbr aria-label={a11yPublishedAgo}>{lastPublishedTimeAgo}</abbr>\n                </>\n              )}\n            </Text>\n          </Stack>\n        }\n      >\n        <Button\n          mode=\"bleed\"\n          tone={liveEdit ? 'critical' : 'positive'}\n          tabIndex={-1}\n          disabled={disabled}\n          aria-label={a11yLabel}\n        >\n          <Flex align=\"center\">\n            <Box marginRight={collapsed ? 0 : 3}>\n              <Text size={2} aria-hidden=\"true\">\n                {liveEdit ? <PlayIcon /> : <PublishIcon />}\n              </Text>\n            </Box>\n            {!collapsed && (\n              <Text size={1} weight=\"medium\">\n                {liveEdit ? (\n                  <abbr aria-label={a11yLabel}>\n                    {lastUpdated ? lastUpdatedTime : lastPublishedTime}\n                  </abbr>\n                ) : (\n                  <abbr aria-label={a11yLabel}>{lastPublishedTime}</abbr>\n                )}\n              </Text>\n            )}\n          </Flex>\n        </Button>\n      </Tooltip>\n    </Root>\n  )\n}\n", "import React, {ComponentProps} from 'react'\nimport {motion} from 'framer-motion'\nimport styled, {keyframes} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\nconst Edit = (props: MotionPathProps) => (\n  <motion.path d=\"M15 7L18 10M6 19L7 15L17 5L20 8L10 18L6 19Z\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\nconst edit = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  changes: {\n    pathLength: 1,\n    transition: {\n      duration: 0.4,\n      delay: 0.5,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n        <Edit variants={edit} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n", "import React, {useMemo} from 'react'\nimport {Box, Button, ButtonProps, Flex, Stack, Text, Tooltip} from '@sanity/ui'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\nimport {useTimeAgo} from 'sanity'\n\ninterface ReviewChangesButtonProps extends React.HTMLProps<HTMLButtonElement> {\n  status?: 'changes' | 'saved' | 'syncing'\n  lastUpdated?: string\n  collapsed?: boolean\n}\n\nconst ReviewButton = React.forwardRef(function ReviewButton(\n  props: ReviewChangesButtonProps & ButtonProps,\n  ref: React.ForwardedRef<HTMLButtonElement>,\n) {\n  const {collapsed, status, lastUpdated, ...rest} = props\n  const lastUpdatedTime = useTimeAgo(lastUpdated || '', {minimal: true})\n  const lastUpdatedTimeAgo = useTimeAgo(lastUpdated || '', {minimal: true, agoSuffix: true})\n  const a11yUpdatedAgo = useTimeAgo(lastUpdated || '', {minimal: false, agoSuffix: true})\n\n  const buttonProps: ButtonProps = useMemo(() => {\n    if (status === 'syncing') {\n      return {\n        text: 'Saving...',\n        tone: undefined,\n      }\n    }\n    if (status === 'changes') {\n      return {\n        text: lastUpdatedTime,\n        tone: 'caution',\n      }\n    }\n    if (status === 'saved') {\n      return {\n        text: 'Saved!',\n        tone: 'positive',\n      }\n    }\n\n    return {}\n  }, [status, lastUpdatedTime])\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <Tooltip\n      placement=\"top\"\n      portal\n      disabled={status !== 'changes'}\n      content={\n        <Stack padding={3} space={3}>\n          <Text size={1} weight=\"semibold\">\n            Review changes\n          </Text>\n          <Text size={1} muted>\n            Changes saved <abbr aria-label={a11yUpdatedAgo}>{lastUpdatedTimeAgo}</abbr>\n          </Text>\n        </Stack>\n      }\n    >\n      <Button\n        mode=\"bleed\"\n        justify=\"flex-start\"\n        tone={buttonProps?.tone}\n        {...rest}\n        data-testid=\"review-changes-button\"\n        ref={ref}\n        aria-label=\"Review changes\"\n      >\n        <Flex align=\"center\">\n          <Box marginRight={collapsed ? 0 : 3} aria-hidden=\"true\">\n            <Text>\n              <AnimatedStatusIcon status={status} />\n            </Text>\n          </Box>\n          {!collapsed && (\n            <Text size={1} weight=\"medium\">\n              {buttonProps?.text}\n            </Text>\n          )}\n        </Flex>\n      </Button>\n    </Tooltip>\n  )\n})\n\nexport const ReviewChangesButton = React.memo(ReviewButton)\n", "import {Box, Flex, useElementRect} from '@sanity/ui'\nimport React, {useEffect, useMemo, useState, memo, useLayoutEffect} from 'react'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentBadges} from './DocumentBadges'\nimport {PublishStatus} from './PublishStatus'\nimport {ReviewChangesButton} from './ReviewChangesButton'\nimport {useSyncState, useTimelineSelector} from 'sanity'\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\nexport const DocumentSparkline = memo(function DocumentSparkline() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    editState,\n    onHistoryClose,\n    onHistoryOpen,\n    timelineStore,\n    value,\n  } = useDocumentPane()\n  const syncState = useSyncState(documentId, documentType)\n\n  const lastUpdated = value?._updatedAt\n  const lastPublished = editState?.published?._updatedAt\n  const liveEdit = Boolean(editState?.liveEdit)\n  const published = Boolean(editState?.published)\n  const changed = Boolean(editState?.draft)\n\n  const [rootFlexElement, setRootFlexElement] = useState<HTMLDivElement | null>(null)\n  const rootFlexRect = useElementRect(rootFlexElement)\n  const collapsed = !rootFlexRect || rootFlexRect?.width < 300\n\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n\n  // Subscribe to TimelineController changes and store internal state.\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  const reviewButton = useMemo(\n    () => (\n      <ReviewChangesButton\n        lastUpdated={lastUpdated}\n        status={status || (changed ? 'changes' : undefined)}\n        onClick={changesOpen ? onHistoryClose : onHistoryOpen}\n        disabled={showingRevision}\n        selected={changesOpen}\n        collapsed={collapsed}\n      />\n    ),\n    [\n      changed,\n      changesOpen,\n      onHistoryClose,\n      onHistoryOpen,\n      lastUpdated,\n      showingRevision,\n      status,\n      collapsed,\n    ],\n  )\n\n  const publishStatus = useMemo(\n    () =>\n      (liveEdit || published) && (\n        <Box marginRight={1}>\n          <PublishStatus\n            disabled={showingRevision}\n            lastPublished={lastPublished}\n            lastUpdated={lastUpdated}\n            liveEdit={liveEdit}\n            collapsed={collapsed}\n          />\n        </Box>\n      ),\n    [collapsed, lastPublished, lastUpdated, liveEdit, published, showingRevision],\n  )\n\n  return (\n    <Flex align=\"center\" data-ui=\"DocumentSparkline\" ref={setRootFlexElement}>\n      {publishStatus}\n\n      <Flex align=\"center\" flex={1}>\n        {reviewButton}\n        {!collapsed && (\n          <Box marginLeft={3}>\n            <DocumentBadges />\n          </Box>\n        )}\n      </Flex>\n    </Flex>\n  )\n})\n", "import React, {useMemo} from 'react'\nimport styled from 'styled-components'\nimport {Box, Flex} from '@sanity/ui'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentSparkline} from './sparkline/DocumentSparkline'\nimport {useTimelineSelector} from 'sanity'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: React.Ref<HTMLDivElement>\n}\n\nconst DocumentActionsBox = styled(Box)`\n  min-width: 10em;\n  max-width: 16em;\n`\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef} = props\n  const {badges, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  return useMemo(\n    () => (\n      <Box paddingLeft={2} paddingRight={[2, 3]} paddingY={2}>\n        <Flex align=\"center\">\n          <Box flex={[1, 2]}>{badges && <DocumentSparkline />}</Box>\n\n          <DocumentActionsBox flex={1} marginLeft={[1, 3]} ref={actionsBoxRef}>\n            {showingRevision ? <HistoryStatusBarActions /> : <DocumentStatusBarActions />}\n          </DocumentActionsBox>\n        </Flex>\n      </Box>\n    ),\n    [actionsBoxRef, badges, showingRevision],\n  )\n}\n", "import isHotkey from 'is-hotkey'\nimport React, {ElementType, createElement, useCallback, useMemo, useState} from 'react'\nimport {ActionStateDialog} from '../statusBar'\nimport {RenderActionCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentActionDescription, DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: React.Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nfunction KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return createElement(\n    as,\n    {\n      id,\n      onKeyDown: handleKeyDown,\n      tabIndex: -1,\n      ...rest,\n      ref: rootRef,\n    },\n    [\n      children,\n      activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      ),\n    ],\n  )\n}\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: React.Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = React.memo(\n  (props: DocumentActionShortcutsProps & Omit<React.HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {({states}) => (\n          <KeyboardShortcutResponder\n            {...rest}\n            activeIndex={activeIndex}\n            actionsBoxElement={actionsBoxElement}\n            as={as}\n            onActionStart={onActionStart}\n            states={states}\n          >\n            {children}\n          </KeyboardShortcutResponder>\n        )}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'DocumentActionShortcuts'\n", "import {\n  Card,\n  Code,\n  DialogProvider,\n  DialogProviderProps,\n  Flex,\n  PortalProvider,\n  Stack,\n  Text,\n  useElementRect,\n} from '@sanity/ui'\nimport React, {memo, useCallback, useMemo, useState} from 'react'\nimport styled from 'styled-components'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {Path} from '@sanity/types'\nimport {DocumentPaneNode} from '../../types'\nimport {Pane, PaneFooter, usePaneRouter} from '../../components'\nimport {usePaneLayout} from '../../components/pane/usePaneLayout'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../constants'\nimport {DocumentOperationResults} from './DocumentOperationResults'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {DocumentPanel} from './documentPanel'\nimport {DocumentActionShortcuts} from './keyboardShortcuts'\nimport {DocumentStatusBar} from './statusBar'\nimport {DocumentPaneProviderProps} from './types'\nimport {useDocumentPane} from './useDocumentPane'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from './constants'\nimport {\n  ChangeConnectorRoot,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  isDev,\n  useDocumentType,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useZIndex,\n} from 'sanity'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <DocumentPaneInner {...props} />\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n              ? 'selected'\n              : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  if (options.type === '*' && !isLoaded) {\n    return <LoadingPane flex={2.5} minWidth={320} paneKey={paneKey} title=\"Loading document…\" />\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={<>The document was not found</>}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            The document type is not defined, and a document with the <code>{options.id}</code>{' '}\n            identifier could not be found.\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProvider\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <InnerDocumentPane />\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProvider>\n  )\n}\n\nfunction usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n\nfunction InnerDocumentPane() {\n  const {\n    changesOpen,\n    documentType,\n    inspector,\n    inspectOpen,\n    onFocus,\n    onPathOpen,\n    onHistoryOpen,\n    onKeyUp,\n    paneKey,\n    schemaType,\n    value,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const zOffsets = useZIndex()\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n  const footerRect = useElementRect(footerElement)\n  const footerH = footerRect?.height\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  if (!schemaType) {\n    return (\n      <ErrorPane\n        currentMinWidth={currentMinWidth}\n        flex={2.5}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        title={\n          <>\n            Unknown document type: <code>{documentType}</code>\n          </>\n        }\n        tone=\"caution\"\n      >\n        <Stack space={4}>\n          {documentType && (\n            <Text as=\"p\">\n              This document has the schema type <code>{documentType}</code>, which is not defined as\n              a type in the local content studio schema.\n            </Text>\n          )}\n\n          {!documentType && (\n            <Text as=\"p\">\n              This document does not exist, and no schema type was specified for it.\n            </Text>\n          )}\n\n          {isDev && value && (\n            <>\n              <Text as=\"p\">Here is the JSON representation of the document:</Text>\n              <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n                <Code language=\"json\" size={[1, 1, 2]}>\n                  {JSON.stringify(value, null, 2)}\n                </Code>\n              </Card>\n            </>\n          )}\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentActionShortcuts\n      actionsBoxElement={actionsBoxElement}\n      as={Pane}\n      currentMinWidth={currentMinWidth}\n      data-testid=\"document-pane\"\n      flex={2.5}\n      id={paneKey}\n      minWidth={minWidth}\n      onKeyUp={onKeyUp}\n      rootRef={setRootElement}\n    >\n      <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n        <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n          <StyledChangeConnectorRoot\n            data-testid=\"change-connector-root\"\n            isReviewChangesOpen={changesOpen}\n            onOpenReviewChanges={onHistoryOpen}\n            onSetFocus={onConnectorSetFocus}\n          >\n            <DocumentPanel\n              footerHeight={footerH || null}\n              isInspectOpen={inspectOpen}\n              rootElement={rootElement}\n              setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n            />\n          </StyledChangeConnectorRoot>\n        </Flex>\n      </DialogProvider>\n\n      {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n      {/* The portal element comes from `DocumentPanel`. */}\n      <PortalProvider\n        __unstable_elements={{[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}}\n      >\n        <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n          <PaneFooter ref={setFooterElement}>\n            <DocumentStatusBar actionsBoxRef={setActionsBoxElement} />\n          </PaneFooter>\n        </DialogProvider>\n      </PortalProvider>\n\n      <DocumentOperationResults />\n    </DocumentActionShortcuts>\n  )\n}\n", "import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport React from 'react'\n\nexport function NoDocumentTypesScreen() {\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"bold\">\n                  No document types\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  Please define at least one document type in your schema.\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    Learn how to add a document type &rarr;\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n", "import React, {useEffect} from 'react'\nimport {ObjectSchemaType} from '@sanity/types'\nimport {Panes} from '../../structureResolvers'\nimport {useDeskTool} from '../../useDeskTool'\nimport {LOADING_PANE} from '../../constants'\nimport {DocumentPaneNode} from '../../types'\nimport {useEditState, useSchema, unstable_useValuePreview as useValuePreview} from 'sanity'\n\ninterface DeskTitleProps {\n  resolvedPanes: Panes['resolvedPanes']\n}\n\nconst DocumentTitle = (props: {documentId: string; documentType: string}) => {\n  const {documentId, documentType} = props\n  const editState = useEditState(documentId, documentType)\n  const schema = useSchema()\n  const isNewDocument = !editState?.published && !editState?.draft\n  const documentValue = editState?.draft || editState?.published\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const {value, isLoading: previewValueIsLoading} = useValuePreview({\n    enabled: true,\n    schemaType,\n    value: documentValue,\n  })\n\n  const documentTitle = isNewDocument\n    ? `New ${schemaType?.title || schemaType?.name}`\n    : value?.title || 'Untitled'\n\n  const settled = editState.ready && !previewValueIsLoading\n  const newTitle = useConstructDocumentTitle(documentTitle)\n  useEffect(() => {\n    if (!settled) return\n    // Set the title as the document title\n    document.title = newTitle\n  }, [documentTitle, settled, newTitle])\n\n  return null\n}\n\nconst PassthroughTitle = (props: {title?: string}) => {\n  const {title} = props\n  const newTitle = useConstructDocumentTitle(title)\n  useEffect(() => {\n    // Set the title as the document title\n    document.title = newTitle\n  }, [newTitle, title])\n  return null\n}\n\nexport const DeskTitle = (props: DeskTitleProps) => {\n  const {resolvedPanes} = props\n\n  if (!resolvedPanes?.length) return null\n\n  const lastPane = resolvedPanes[resolvedPanes.length - 1]\n\n  // If the last pane is loading, display the desk tool title only\n  if (isLoadingPane(lastPane)) {\n    return <PassthroughTitle />\n  }\n\n  // If the last pane is a document\n  if (isDocumentPane(lastPane)) {\n    // Passthrough the document pane's title, which may be defined in structure builder\n    if (lastPane?.title) {\n      return <PassthroughTitle title={lastPane.title} />\n    }\n\n    // Otherwise, display a `document.title` containing the resolved Sanity document title\n    return <DocumentTitle documentId={lastPane.options.id} documentType={lastPane.options.type} />\n  }\n\n  // Otherwise, display the last pane's title (if present)\n  return <PassthroughTitle title={lastPane?.title} />\n}\n\n/**\n * Construct a pipe delimited title containing `activeTitle` (if applicable) and the base desk title.\n *\n * @param activeTitle - Title of the first segment\n *\n * @returns A pipe delimited title in the format `${activeTitle} | %BASE_DESK_TITLE%`\n * or simply `%BASE_DESK_TITLE` if `activeTitle` is undefined.\n */\nfunction useConstructDocumentTitle(activeTitle?: string) {\n  const deskToolBaseTitle = useDeskTool().structureContext.title\n  return [activeTitle, deskToolBaseTitle].filter((title) => title).join(' | ')\n}\n\n// Type guards\nfunction isDocumentPane(pane: Panes['resolvedPanes'][number]): pane is DocumentPaneNode {\n  return pane !== LOADING_PANE && pane.type === 'document'\n}\n\nfunction isLoadingPane(pane: Panes['resolvedPanes'][number]): pane is typeof LOADING_PANE {\n  return pane === LOADING_PANE\n}\n", "import {PortalProvider, useTheme, useToast} from '@sanity/ui'\nimport React, {memo, Fragment, useState, useEffect, useCallback} from 'react'\nimport styled from 'styled-components'\nimport isHotkey from 'is-hotkey'\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, DeskToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {PaneNode} from '../../types'\nimport {PaneLayout} from '../pane'\nimport {useDeskTool} from '../../useDeskTool'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {DeskTitle} from './DeskTitle'\nimport {useSchema, _isCustomDocumentTypeDefinition} from 'sanity'\nimport {useRouterState} from 'sanity/router'\n\ninterface DeskToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const DeskTool = memo(function DeskTool({onPaneChange}: DeskToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useDeskTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', []),\n  )\n  const {\n    sanity: {media},\n  } = useTheme()\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={media[1]}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <DeskToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          ),\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <DeskTitle resolvedPanes={resolvedPanes} />\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n", "import React, {useEffect, useState} from 'react'\nimport {ErrorBoundary} from '@sanity/ui'\nimport {DeskToolOptions} from '../../types'\nimport {DeskToolProvider} from '../../DeskToolProvider'\nimport {setActivePanes} from '../../getIntentState'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {DeskTool} from './DeskTool'\nimport {SourceProvider, useWorkspace, Tool} from 'sanity'\n\ninterface DeskToolBoundaryProps {\n  tool: Tool<DeskToolOptions>\n}\n\nexport function DeskToolBoundary({tool: {options}}: DeskToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <DeskToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <DeskTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </DeskToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],
  "mappings": "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",
  "names": ["RenderActionCollectionState", "props", "actions", "children", "actionProps", "onActionComplete", "jsx", "GetHookCollectionState", "onReset", "hooks", "args", "RenderBadgeCollectionState", "badges", "badgeProps", "rest", "emptyArray", "PaneRouterProvider", "flatIndex", "index", "params", "payload", "siblingIndex", "navigate", "navigateIntent", "useRouter", "routerState", "useRouterState", "panes", "expand", "usePaneLayout", "routerPaneGroups", "useMemo", "lastPane", "length", "groupIndex", "modifyCurrentGroup", "useCallback", "modifier", "currentGroup", "currentItem", "nextGroup", "nextPanes", "slice", "nextRouterState", "setTimeout", "setPayload", "nextPayload", "siblings", "item", "setParams", "nextParams", "handleEditReference", "_ref", "id", "parentRefPath", "type", "template", "pathToString", "ctx", "hasGroupSiblings", "groupLength", "routerPanesState", "ChildLink", "BackLink", "ReferenceChildLink", "ParameterizedLink", "replaceCurrent", "opts", "arguments", "undefined", "closeCurrent", "filter", "sibling", "closeCurrentAndAfter", "expandLast", "element", "replace", "duplicateCurrent", "options", "duplicatedItem", "setView", "viewId", "restParams", "omit", "view", "PaneRouterContext", "Provider", "value", "_calcPaneResize", "cache", "left", "right", "deltaX", "_a", "_b", "sum", "flex", "width", "leftMinWidth", "minWidth", "PANE_DEFAULT_MIN_WIDTH", "rightMinWidth", "leftMaxWidth", "Math", "min", "maxWidth", "Infinity", "rightMaxWidth", "minDeltaX", "rightMinDeltaX", "maxDeltaX", "leftMaxDeltaX", "_deltaX", "max", "leftW", "rightW", "leftFlex", "rightFlex", "_getDOMPath", "rootElement", "el", "path", "e", "parentElement", "Array", "from", "childNodes", "indexOf", "unshift", "EMPTY_PATH", "_sortElements", "elements", "map", "WeakMap", "set", "_sortByElementPath", "a", "b", "get", "len", "i", "aIndex", "bIndex", "sort", "createPaneLayoutController", "observers", "optionsMap", "userCollapsedElementSet", "Set", "rootWidth", "expandedElement", "resizeDataMap", "Map", "resizing", "collapse", "add", "_notifyObservers", "delete", "mount", "original", "push", "idx", "splice", "resize", "leftElement", "_c", "_d", "leftIndex", "leftOptions", "rightElement", "rightOptions", "offsetWidth", "leftResizeData", "rightResizeData", "currentMinWidth", "currentMaxWidth", "setRootElement", "nextRootElement", "setRootWidth", "nextRootWidth", "subscribe", "observer", "_elements", "dataMap", "lastElement", "collapsedWidth", "PANE_COLLAPSED_WIDTH", "remaingWidth", "isLast", "userCollapsed", "has", "sizeCollapsed", "collapsed", "resizeData", "data", "PaneLayout", "onCollapse", "onExpand", "restProps", "controller", "useState", "rootRect", "useElementRect", "state", "setState", "useEffect", "paneLayout", "PaneLayoutContext", "Root", "ref", "DocumentInspectorPanel", "documentId", "documentType", "usePane", "closeInspector", "inspector", "useDocumentPane", "features", "useDeskTool", "handleClose", "name", "createElement", "component", "onClose", "resizablePanes", "Resizable", "as", "DOCUMENT_INSPECTOR_MAX_WIDTH", "DOCUMENT_INSPECTOR_MIN_WIDTH", "Box", "PaneResolutionError", "Error", "constructor", "message", "context", "helpId", "cause", "_ref2", "__publicField", "randomIdCache", "assignId", "obj", "cachedValue", "nanoid", "bindCache", "memoBind", "methodKey", "boundMethods", "bound", "method", "concat", "bind", "isPromise", "thing", "then", "isSerializable", "isRecord", "serialize", "rethrowWithPaneResolutionErrors", "next", "unresolvedPane", "wrapWithPublishReplay", "pipe", "publishReplay", "refCount", "createPaneResolver", "middleware", "resolvePane", "isObservable", "switchMap", "result", "observableOf", "resolveIntent", "resolvedPaneCache", "memoize", "nextFn", "key", "join", "cachedResolvedPane", "fallbackEditorPanes", "traverse", "_ref3", "currentId", "intent", "parent", "levelIndex", "structureContext", "targetId", "schemaTypeName", "otherParams", "splitIndex", "resolvedPane", "firstValueFrom", "depthIndex", "canHandleIntent", "call", "pane", "child", "items", "Promise", "all", "nextLevelIndex", "resolve", "_id", "flat", "matchingPanes", "rootPaneNode", "closestPaneToRoot", "fallbackEditorChild", "nodeId", "resolveDocumentNode", "defaultDocumentBuilder", "schemaType", "initialValueTemplate", "hashContext", "stringify", "parentId", "serializeOptionsIndex", "serializeOptions", "serializeOptionsPath", "hashResolvedPaneMeta", "meta", "normalized", "routerPaneSibling", "paneNode", "JSON", "resolvePaneTree", "_ref4", "flattenedRouterPanes", "current", "resolvedPaneMeta", "loadingPanes", "restIndex", "loadingPanePath", "_", "currentIndex", "loadingPane", "nextStream", "startsWith", "nextResolvedPanes", "console", "warn", "generateHelpUrl", "createResolvedPaneNodeStream", "_ref5", "routerPanesStream", "initialCacheState", "cacheKeysByFlatIndex", "NEVER", "resolvedPanes$", "rawRouterPanes", "routerPanes", "flatMap", "routerPaneGroup", "startWith", "pairwise", "_ref6", "prev", "curr", "prevValue", "currValue", "isEqual", "diffIndex", "scan", "acc", "beforeDiffIndex", "afterDiffIndex", "keysToKeep", "keySet", "keysToDelete", "cacheKeySet", "_ref7", "nextPane", "prevPane", "distinctUntilChanged", "nextValue", "useRouterPanesStream", "routerStateSubject", "ReplaySubject", "routerPanes$", "asObservable", "_routerState", "useResolvedPanes", "error", "setError", "setData", "paneDataItems", "resolvedPanes", "reduce", "groupsLen", "itemId", "paneDataItem", "active", "childItemId", "LOADING_PANE", "selected", "subscription", "unsubscribe", "ensureDocumentIdAndType", "documentStore", "uuid", "resolvedType", "resolveTypeForDocument", "EMPTY_RECORD", "IntentResolver", "memo", "maybeIntent", "intentName", "useDocumentStore", "cancelled", "effect", "catch", "PathSegment", "styled", "span", "__template", "formatStack", "stack", "RegExp", "location", "host", "StructureError", "_ref8", "showStack", "SerializeError", "includes", "handleReload", "window", "reload", "Card", "height", "overflow", "padding", "sizing", "tone", "Container", "Heading", "jsxs", "marginTop", "radius", "shadow", "Stack", "space", "Label", "Code", "segment", "Text", "href", "rel", "target", "Button", "text", "icon", "SyncIcon", "onClick", "UnknownPane", "isSelected", "paneKey", "Pane", "PaneHeader", "title", "PaneContent", "muted", "getWaitMessages", "thresholds", "ms", "isDev", "src", "of", "merge", "_ref9", "mapTo", "delay", "DEFAULT_MESSAGE", "Content", "Flex", "LoadingPane", "messageProp", "resolvedMessage", "split", "currentMessage", "setCurrentMessage", "sub", "contentElement", "setContentElement", "mounted", "setMounted", "_raf2", "content", "align", "direction", "justify", "Spinner", "size", "displayName", "paneMap", "lazy", "document", "documentList", "list", "DeskToolPane", "PaneComponent", "Suspense", "fallback", "isActive", "_ref10", "_ref11", "prevParams", "prevPayload", "keys", "Object", "ErrorPane", "paddingX", "paddingY", "getOpErrorTitle", "op", "getOpSuccessTitle", "IGNORE_OPS", "DocumentOperationResults", "pushToast", "useToast", "event", "useDocumentOperationEvent", "prevEvent", "useRef", "paneRouter", "usePaneRouter", "cleanupId", "closable", "duration", "status", "description", "clearTimeout", "useDeskToolSetting", "namespace", "defaultValue", "settingsStore", "useSettingsStore", "setValue", "deskToolSettings", "forNamespace", "settings", "forKey", "listen", "newValue", "VIEW_MODE_PARSED", "VIEW_MODE_RAW", "VIEW_MODES", "lru", "HLRU", "isExpanded", "keyPath", "cached", "isArray", "toggleExpanded", "selectElement", "sel", "getSelection", "range", "createRange", "removeAllRanges", "selectNodeContents", "addRange", "select", "currentTarget", "maybeSelectAll", "selectAll", "keyCode", "metaKey", "ctrlKey", "preventDefault", "isDocumentLike", "isString", "_type", "JSONInspectorWrapper", "div", "_ref12", "theme", "color", "fonts", "sanity", "css", "code", "family", "sizes", "fontSize", "lineHeight", "rem", "syntax", "property", "constant", "string", "boolean", "number", "Search", "onChange", "query", "handleChange", "TextInput", "SearchIcon", "placeholder", "InspectDialog", "onInspectClose", "dialogIdPrefix", "viewModeId", "onViewModeChange", "viewMode", "find", "mode", "setParsedViewMode", "setRawViewMode", "Dialog", "header", "Fragment", "DocTitle", "onClickOutside", "style", "position", "bottom", "zIndex", "TabList", "Tab", "label", "TabPanel", "outline", "JSONInspector", "search", "language", "tabIndex", "onKeyDown", "onDoubleClick", "onFocus", "DeletedDocumentBanner", "_ref13", "revisionId", "restore", "useDocumentOperation", "handleRestore", "execute", "ReadOnlyIcon", "gap", "marginLeft", "TextOneLine", "ReferenceChangedBanner", "_e", "_f", "documentPreviewStore", "useDocumentPreviewStore", "routerReferenceId", "parentGroup", "parentSibling", "hasHistoryOpen", "Boolean", "rev", "pathFromString", "referenceInfo", "useMemoObservable", "parentRefPathSegment", "loading", "publishedId", "getPublishedId", "keyedSegmentIndex", "findIndex", "p", "unstable_observePathsDocumentPair", "debounceTime", "_ref14", "draft", "published", "availability", "refValue", "pathGet", "snapshot", "handleReloadReference", "shouldHide", "available", "WarningOutlineIcon", "CloseIcon", "PermissionCheckBanner", "_ref15", "granted", "requiredPermission", "currentUser", "useCurrentUser", "plural", "roles", "r", "array", "sep", "usePrevious", "LONG_ENOUGH_BUT_NOT_TOO_LONG", "useConditionalToast", "toast", "wasEnabled", "enabled", "ev", "FormView", "forwardRef", "hidden", "margins", "collapsedFieldSets", "collapsedPaths", "displayed", "editState", "fieldActions", "validation", "ready", "formState", "onBlur", "onSetCollapsedPath", "onPathOpen", "onSetCollapsedFieldSet", "onSetActiveFieldGroup", "presence", "useDocumentPresence", "patchChannel", "createPatchChannel", "isLocked", "transactionSyncLock", "pair", "documentEvents", "tap", "publish", "prepareMutationEvent", "prepareRebaseEvent", "hasRev", "_rev", "patches", "formRef", "setFormRef", "focusPath", "focusFirstDescendant", "setRef", "node", "paddingTop", "paddingBottom", "PresenceOverlay", "onSubmit", "FormBuilder", "__internal_fieldActions", "__internal_patchChannel", "changed", "focused", "groups", "members", "onFieldGroupSelect", "onPathBlur", "onPathFocus", "onSetFieldSetCollapsed", "onSetPathCollapsed", "readOnly", "Delay", "mutations", "mut", "patch", "fromMutationPatches", "origin", "remotePatches", "remoteMutations", "localPatches", "localMutations", "DocumentHeaderTabs", "activeViewId", "views", "tabPanelId", "DocumentHeaderTab", "handleClick", "disabled", "DocumentHeaderTitle", "connectionState", "documentValue", "subscribed", "useValuePreview", "DocumentPanelHeader", "_props", "onMenuAction", "onPaneClose", "onPaneSplit", "menuItems", "menuItemGroups", "timelineStore", "unstable_languageFilter", "useFieldActions", "menuNodes", "resolveMenuNodes", "actionHandler", "menuButtonNodes", "isMenuNodeButton", "contextMenuNodes", "isNotMenuNodeButton", "showTabs", "useTimelineSelector", "revTime", "showSplitPaneButton", "splitViews", "showSplitPaneCloseButton", "showPaneGroupCloseButton", "backButton", "tabs", "ArrowLeftIcon", "subActions", "TimelineMenu", "chunk", "placement", "languageFilterComponent", "PaneHeaderActionButton", "PaneContextMenuButton", "nodes", "Tooltip", "whiteSpace", "portal", "SplitVerticalIcon", "DocumentBox", "Scroller", "ScrollContainer", "_ref16", "$disabled", "DocumentPanel", "footerHeight", "isInspectOpen", "setDocumentPanelPortalElement", "permissions", "isPermissionsLoading", "isDeleting", "isDeleted", "layoutCollapsed", "parentPortal", "usePortal", "headerElement", "setHeaderElement", "headerRect", "portalRef", "documentScrollElement", "setDocumentScrollElement", "formContainerElement", "_createdAt", "activeView", "portalElement", "splitPanes", "formViewHidden", "activeViewNode", "historical", "lastNonDeletedRevId", "scrollTo", "inspectDialog", "showInspector", "PortalProvider", "__unstable_elements", "BoundaryElementProvider", "VirtualizerScrollInstanceProvider", "scrollElement", "containerElement", "POPOVER_FALLBACK_PLACEMENTS", "DIALOG_WIDTH_TO_UI_WIDTH", "small", "medium", "large", "full", "ConfirmDialog", "dialog", "referenceElement", "Popover", "ConfirmDialogContent", "fallbackPlacements", "open", "preventOverflow", "cancelButtonIcon", "cancelButtonText", "confirmButtonIcon", "confirmButtonText", "onCancel", "onConfirm", "isTopLayer", "useLayer", "setElement", "handleClickOutside", "handleGlobalKeyDown", "useClickOutside", "useGlobalKeyDown", "borderTop", "Grid", "columns", "ModalDialog", "dialogId", "useId", "footer", "LegacyLayerProvider", "zOffset", "__unstable_hideCloseButton", "showCloseButton", "PopoverDialog", "PopoverDialogContent", "DocumentActionPortalProvider", "DOCUMENT_PANEL_PORTAL_ELEMENT", "ActionStateDialog", "modalId", "unknownModal", "ActionMenuButton", "actionStates", "idPrefix", "buttonRef", "actionIndex", "setActionIndex", "setReferenceElement", "handleAction", "popoverProps", "currentAction", "MenuButton", "button", "ChevronDownIcon", "menu", "Menu", "actionState", "ActionMenuListItem", "onAction", "popover", "onHandle", "tooltipContent", "MenuItem", "marginRight", "isValidElement", "isValidElementType", "shortcut", "Hotkeys", "String", "s", "toUpperCase", "DocumentStatusBarActionsInner", "showMenu", "states", "firstActionState", "menuActionStates", "buttonElement", "setButtonElement", "toLowerCase", "LayerProvider", "DocumentStatusBarActions", "_ref17", "HistoryStatusBarActions", "revision", "historyActions", "HistoryRestoreAction", "_ref18", "BADGE_TONES", "primary", "success", "warning", "danger", "DocumentBadgesInner", "_ref19", "Inline", "badge", "Badge", "DocumentBadges", "_ref20", "PublishStatus", "lastPublished", "lastUpdated", "liveEdit", "lastPublishedTimeAgo", "useTimeAgo", "minimal", "agoSuffix", "lastPublishedTime", "lastUpdatedTimeAgo", "lastUpdatedTime", "a11yUpdatedAgo", "a11yPublishedAgo", "a11yLabel", "PlayIcon", "PublishIcon", "weight", "StyledMotionPath", "motion", "Circle", "circle", "fill", "cx", "cy", "strokeWidth", "Arrows", "d", "Checkmark", "Edit", "rotateAnimation", "keyframes", "RotateGroup", "g", "root", "syncing", "scale", "transition", "saved", "changes", "strokeDasharray", "strokeDashoffset", "opacity", "arrows", "checkmark", "pathLength", "edit", "AnimatedStatusIcon", "viewBox", "stroke", "variants", "initial", "animate", "ReviewButton", "React", "buttonProps", "ReviewChangesButton", "SYNCING_TIMEOUT", "SAVED_TIMEOUT", "DocumentSparkline", "changesOpen", "onHistoryClose", "onHistoryOpen", "syncState", "useSyncState", "_updatedAt", "rootFlexElement", "setRootFlexElement", "rootFlexRect", "setStatus", "showingRevision", "onOlderRevision", "isSyncing", "timerId", "useLayoutEffect", "reviewButton", "publishStatus", "DocumentActionsBox", "DocumentStatusBar", "actionsBoxRef", "paddingLeft", "paddingRight", "KeyboardShortcutResponder", "actionsBoxElement", "activeIndex", "onActionStart", "rootRef", "activeAction", "handleKeyDown", "matchingStates", "isHotkey", "matchingState", "DocumentActionShortcuts", "setActiveIndex", "onComplete", "_ref21", "DIALOG_PROVIDER_POSITION", "StyledChangeConnectorRoot", "ChangeConnectorRoot", "DocumentPane", "parentSourceName", "useSource", "SourceProvider", "source", "DocumentPaneInner", "resolveNewDocumentOptions", "usePaneOptions", "isLoaded", "isDocumentLoaded", "useDocumentType", "templateItems", "templatePermissions", "isTemplatePermissionsLoading", "useTemplatePermissions", "providerProps", "mergeDocumentType", "childParams", "routerPanesStateLength", "activePath", "DocumentPaneProvider", "ReferenceInputOptionsProvider", "EditReferenceLinkComponent", "onEditReference", "initialValueTemplateItems", "InnerDocumentPane", "templates", "useTemplates", "templateName", "t", "inspectOpen", "onKeyUp", "zOffsets", "useZIndex", "footerElement", "setFooterElement", "setActionsBoxElement", "documentPanelPortalElement", "footerRect", "footerH", "onConnectorSetFocus", "DOCUMENT_PANEL_INITIAL_MIN_WIDTH", "DOCUMENT_PANEL_MIN_WIDTH", "DialogProvider", "isReviewChangesOpen", "onOpenReviewChanges", "onSetFocus", "PaneFooter", "NoDocumentTypesScreen", "DocumentTitle", "useEditState", "schema", "useSchema", "isNewDocument", "isLoading", "previewValueIsLoading", "documentTitle", "settled", "newTitle", "useConstructDocumentTitle", "PassthroughTitle", "DeskTitle", "isLoadingPane", "isDocumentPane", "activeTitle", "deskToolBaseTitle", "StyledPaneLayout", "isSaveHotkey", "DeskTool", "_ref22", "onPaneChange", "setLayoutCollapsed", "isResolvingIntent", "media", "useTheme", "setPortalElement", "handleRootCollapse", "handleRootExpand", "addEventListener", "removeEventListener", "hasDefinedDocumentTypes", "_original", "types", "some", "_isCustomDocumentTypeDefinition", "_ref23", "paneIndex", "paneParams", "DeskToolBoundary", "tool", "_ref24", "unstable_sources", "sources", "useWorkspace", "firstSource", "defaultDocumentNode", "structure", "setActivePanes", "ErrorBoundary", "onCatch", "DeskToolProvider"]
}
